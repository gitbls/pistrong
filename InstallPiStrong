#!/bin/bash
#
# Installation script for piStrongVPN
# Performs the following tasks
#   Ensures required packages are installed
#       On Raspbian these are: Apt-get install libgmp10 libgmp-dev libsystemd-dev libssl-dev
#   Creates a work directory: $PISTRONGOOT/piStrong (defaults to /root/piStrong)
#   Downloads and bunzip2 the current released strongswan bits 
#   Builds strongswan
#   Installs into the system
# Use pistrong to manage users and certificates
# Start and stop the VPN via: 'sudo pistrong service start' and 'sudo pistrong service stop' ...
#   ...or 'sudo systemctl start strongswan' and 'sudo systemctl stop strongswan'
#

function getssver() {
    vs1=$(curl -s -L https://www.strongswan.org/download.html | grep 'Current Release' | head -1)
    s1=${vs1##<h4>Current Release*normal\">}
    ssver=${s1%%<*}
    return 1
}

function getosdistro() {
    [ "$osdistro" != "" ] && return
    if [ -f "/etc/os-release" ]
    then
        osdistro=$(grep ^ID= /etc/os-release | (IFS='='; read a b ; echo $b))
    else
        osdistro="unknown"
    fi
    osdistro=${osdistro%\"}
    osdistro=${osdistro#\"}
}

function askyn() {
    local ans
    echo -n "$1" '[y/n]? ' ; read $2 ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function askin() {
    local ans sw=""
    # sw="-n 1"
    echo -n "$1 "; read $sw ans
}

function askinall() {
# Asks only if started with 'allx'
    [ "$cmd" == "allx" ] && askin "$1"
}

function gotoBuildDir() {
    if [ "$ssver" == "" ]
    then
	# See if we can find the build dir
	for d in $PSDIR/strongswan-*
	do
	    # Found it. Get ssver
	    IFS="-" read fn ssver <<< $d
	    break
	done
    fi
    PSBDIR="$PISTRONGROOT/piStrong/strongswan-$ssver"
    cd $PSBDIR
    return 0
}

function DoPreReqs() {
    getosdistro
    case "$osdistro" in
        ubuntu)
            echo "I'll try to install the required packages"
            apt-get install make gcc pkg-config libgmp10 libgmp-dev libsystemd-dev libssl-dev python3-pexpect
            echo "Check above to ensure everything got installed"
            ;;
        opensuse*)
            echo "I'll try to install the required packages"
            zypper in make gcc gmp-devel systemd-devel libopenssl-1_1-devel python3-pexpect
            echo "Check above to ensure everything got installed"
            ;;
        centos|rhel|fedora)
            echo "I'll try to install the required packages, but this is incomplete"
            yum install gcc gmp-devel.x86_64 systemd-devel.x86_x64 openssl-devel.x86_64
            echo "Check above to ensure everything got installed"
            echo "** You'll need to install python3 and pexpect if they are not already installed"
            ;;
        debian|raspbian)
            echo "** Ensure your Pi is up to date"
            echo " Your Pi must be up to date with the Raspbian repositories by using these commands"
	    echo ""
            echo "    sudo apt-get update"
            echo "    sudo apt-get upgrade"
            echo ""
            echo "  If you have not done this yet, respond n to exit and update your Pi"
            echo "  Then reboot your Pi and restart this procedure"
            echo ""
            if askyn "Press y to Continue, n to exit and update your Pi" "-n 1"
            then
		[ "$cmd" == "all" ] && ally="-y" || ally=""
                echo ""
                for p in libgmp10 libgmp-dev libsystemd-dev libssl-dev python3-pexpect zip curl pkg-config ; do
                    if ! dpkg-query -s $p > /dev/null 2>&1
                    then
                        echo "Installing package $p"
                        apt-get $ally install $p
                    else
                        echo "Package $p already installed"
                    fi
                done
            else
                echo ""
                exit 1
            fi
            if [ "$(hostname)" == "raspberrypi" ]
            then
                echo ""
                echo "% Your hostname is still 'raspberrypi'"
                echo "  We STRONGLY encourage you to change it via sudo raspi-config Network Options before continuing"
                if askyn "Press y to exit and correct hostname, n to continue"
                then
                    exit 1
                fi
            fi
    ;;
        *) echo "% Pre-reqs unknown for distro $osdistro"
    esac
}

function DoDownload() {
    cd $PISTRONGROOT
    getssver
#    ssver="5.6.3"  # If you want a specific version (and it's still available, of course)
    echo ""
    echo "Using Strongswan version $ssver"
    echo ""
    echo "** The strongSwan download/build process can take several minutes (fast RPi4)"
    echo "   or close to an hour (RPi0W)."
    echo ""
    [ ! -d piStrong ] && mkdir piStrong
    cd ./piStrong
    [ -d strongswan-$ssver ] && rm -rf strongswan-$ssver
    #
    # Make sure no older versions are there with the same name pattern
    #
    oldssver=""
    for d in $PSDIR/strongswan-*.*.*
    do
	if [ -d $d ]
	then
	    IFS="-" read fn oldssver <<< $d
	    break
	fi
    done
    if [ "$oldssver" != "" ]
    then
	echo ""
	echo "% The directory '$PSDIR/strongswan-$oldssver' exists"
	echo "% You must rename or delete all directories named '$PSDIR/strongswan-xx.xx.xx' before continuing"
	exit
    fi
    if [ ! -f strongswan-$ssver.tar.bz2 ]
    then
	curl -L https://download.strongswan.org/strongswan-$ssver.tar.bz2 -o strongswan-$ssver.tar.bz2
	ests=$?
	[ $ests -ne 0 ] && echo "% Error downloading strongSwan tarball; Please try again" && exit
    else
	echo ""
	echo "Using found strongSwan tar archive $ssver.tar.bz2"
    fi
#    askinall "Press Enter to unpack the sources: "
    echo ""
    [ -f pistrong-untar.log ] && rm -f pistrong-untar.log
    echo "** $(date +'%Y-%m-%d %H:%M:%S') Unpacking source archive [Log: $PSDIR/pistrong-untar.log]"
    tar -xjvf strongswan-$ssver.tar.bz2 > pistrong-untar.log 2>&1
    ests=$?
    [ $ests -eq 0 ] && sts="No errors" || sts="review $PSDIR/pistrong-untar.log"
    echo "   tar exit status: $ests ($sts)"
}

function DoPreConf() {
    gotoBuildDir
    askinall "Press Enter to start pre-make configuration: "
    echo ""
    echo "** $(date +'%Y-%m-%d %H:%M:%S') Performing pre-make configuration [Log: $PSBDIR/pistrong-configure.log]"
    ./configure --prefix= --enable-eap-mschapv2 --enable-eap-identity --enable-openssl --enable-eap-md5 --enable-eap-tls --enable-eap-dynamic --enable-systemd --enable-swanctl --disable-charon --disable-stroke --disable-scepclient --enable-counters > pistrong-configure.log
    ests=$?
    [ $ests -eq 0 ] && sts="No errors" || sts="review $PSBDIR/pistrong-configure.log"
    echo "   Config exit status: $ests ($sts)"
}

function DoMake() {
    gotoBuildDir
    askinall "Press Enter to start make: "
    echo ""
    echo "** $(date +'%Y-%m-%d %H:%M:%S') Performing make [Log: $PSBDIR/pistrong-make.log]"
    make > pistrong-make.log
    ests=$?
    [ $ests -eq 0 ] && sts="No errors" || sts="review $PSBDIR/pistrong-make.log"
    echo "   Make exit status: $ests ($sts)"
}

function DoInstall() {
    gotoBuildDir
    askinall "Press Enter to start install: "
    echo ""
    echo "** $(date +'%Y-%m-%d %H:%M:%S') Performing install [Log: $PSBDIR/pistrong-install.log]"
    make install > pistrong-install.log 2>&1
    ests=$?
    [ $ests -eq 0 ] && sts="No errors" || sts="review $PSBDIR/pistrong-install.log"
    echo "   Install exit status: $ests ($sts)"
}

function DoMakeDirs() {
    echo "** Creating /etc/swanctl/pistrong directories..."
    cd /etc/swanctl
    [ ! -d conf.d ]   && mkdir conf.d
    [ ! -d pistrong ] && mkdir pistrong && mkdir pistrong/{client-assets,server-assets,VPNClients,backup}
    chmod 700 pistrong/client-assets pistrong/server-assets
    [ ! -d "p12" ] && mkdir p12 && chmod 750 p12
}

function DoPostConf() {
    [ "$cmd" == "allx" ] && echo "" && echo "** $(date +'%Y-%m-%d %H:%M:%S') Starting postconf"
    [ "$cmd" != "postconf" -a "$cmd" != "post-configure" ] && askinall "Press Enter to start postconf: "
    echo ""
    echo " VPN Server configuration includes:"
    echo "   Enable IPV4 forwarding"
    echo ""
    fserver=1
    if askyn "Configure this system to be a VPN Server"
    then
	fserver=0
    fi
    DoMakeDirs
    sysctl92="/etc/sysctl.d/92-pistrong.conf"
    sysctl92d="/etc/sysctl.d/.92-pistrong.conf"
    if [ $fserver -eq 0 ]
    then
	if [ ! -f $sysctl92 ]
	then
	    echo "** Creating $sysctl92 to set net.ipv4.ip_forward=1"
	    echo "net.ipv4.ip_forward=1" > $sysctl92 && sysctl -p $sysctl92 > /dev/null
	fi
    else
	# Write it on VPN clients as well...but hidden so not executed
	[ ! -f $sysctl92d ] && echo "net.ipv4.ip_forward=1" > $sysctl92d
    fi
    # Change IKE logging to eliminate keep-alive message logging
    if [ ! -f /etc/strongswan.d/orig-charon-systemd.conf ]
    then
	mv /etc/strongswan.d/charon-systemd.conf /etc/strongswan.d/orig-charon-systemd.conf
	cat >> /etc/strongswan.d/charon-systemd.conf <<EOF
charon-systemd {
    #
    # Section to configure native systemd journal logger, very similar to the
    # syslog logger as described in LOGGER CONFIGURATION in strongswan.conf(5).
    # See https://wiki.strongswan.org/projects/strongswan/wiki/Loggerconfiguration
    #
    journal {

        # Loglevel for a specific subsystem.
        # <subsystem> = <default>

        # Default loglevel.
        # default = 1

        # ** pistrong set IKE=0 to turn off keep-alive message logging
	ike = 0

    }
}
EOF
    fi
}
function DoAll() {
    DoPreReqs
    DoDownload
    DoPreConf
    DoMake
    DoInstall
    fServer=0
    DoPostConf
    echo ""
    echo "** pistrong/strongSwan Installation complete"
    echo ""
    echo "** Required Post-installation Steps:"
    if [ $fserver -eq 0 ]
    then
	echo "     Add router port forwards for UDP ports 500 and 4500 to this system"
	echo ""
	echo "     See https://github.com/gitbls/pistrong/blob/master/makeMyCA to fully configure a CA"
	echo "     that supports iOS, Windows, and Linux VPN Clients"
	echo ""
	echo "     Set up iptables. See https://github.com/gitbls/pistrong/blob/master/README.md#firewall-considerations"
	echo ""
	echo "     See pistrong help and pistrong --help for pistrong command details"
    else
	echo "     Once you have received the VPN Cert Pack from the VPN Server manager"
	echo "      install it into strongSwan using the 'sudo pistrong client install' command"
	echo "     Then..."
    fi
    echo ""
    echo "        'sudo pistrong service start' or 'sudo systemctl start strongswan' to start the strongSwan VPN"
    echo "        'sudo pistrong service enable' or 'sudo systemctl enable strongswan' to enable strongSwan to restart after reboot"
    echo ""
    echo "   Reboot and make sure everything works"
    echo ""

}
#
# Main
#
if [[ ! $EUID -eq 0 ]];then
    echo "? Please run as root: sudo $0 $1 $2"
    exit 1
fi

cmd="$1"
[ "$cmd" == "" ] && cmd="all"
[ "$PISTRONGROOT" == "" ] && PISTRONGROOT="/root"
[ ! -d "$PISTRONGROOT" ] && echo "? PISTRONGROOT directory '$PISTRONGROOT' does not exist" && exit
PSDIR="$PISTRONGROOT/piStrong"

case "$cmd" in
    "prereq")   DoPreReqs ;;
    "download") DoDownload ;;
    "preconf") DoPreConf ;;
    "make") DoMake ;;
    "install") DoInstall ;;
    "postconf"|"post-configure") DoPostConf ;;
    "makedirs"|"mkdir") DoMakeDirs ;;
    "all"|"allx") DoAll ;;
    *) echo "? Invalid command" ;
       echo "? Commands: prereq|download|preconf|make|install|postconf|all" ;
       exit 1
       ;;
esac
