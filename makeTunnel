#!/bin/bash
#
version="V2.0"
#
# Run this script via sudo After strongSwan is installed
# Builds a tunnel
#     - Client Cert Pack for the remote end of a tunnel
#     - Configuration updated for this end of the tunnel
#
# Configuration information required
#
#     For each end of the Tunnel
#          VPN Server name
#          VPN Server LAN IP address
#          VPN Server LAN CIDR (e.g., ip.ad.dr.0/24)
#          VPN Server WAN address (typically your public IP address or public DNS name)
#
# Notes
#    If you want the CA to have a hostname other than the current hostname
#      use pistrong --myfqdn fqdn.hostname.you.want before this script
#    For instance: pistrong --myfqdn BobsCA.noname.com
#
#    For hosts other than the VPN server to have access to the remote LAN
#    Need to add the VPN server as a router for the remote LAN.
#    If the VPN Server is 10.1.10.2 and 10.2.10.0/24 is the remote LAN,
#    you'd do something like this on a Linux system on the 10.1.10.0 LAN:
#      route add -net 10.2.10.0 gw 10.1.10.2 netmask 255.255.255.0
#
# Dev note: Same-subnet implementation details at https://www.strongswan.org/testing/testresults/ikev2/net2net-same-nets/
#
function errexit() {
    echo -e "$1"
    exit 1
}

function readconfig() {
    #
    # Reads the config from the makeTunnel config file
    #
    # $1: Config file
    #
    local rpifun value cf="$1" snolq
    if [ -f $cf ]
    then
        while IFS=":" read -r rpifun value
        do
            if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
            then
                # Cant' use stripquotes, it's in sdm-cparse, and can't source it w/o processing this first ($sdmdir)
                #value="${value%%\#*}"    # Del EOL comments
                value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
                snolq="${value#\"}"        # Get string without open quote
                if [ "$snolq" != "$value" ] # if lq was there, then update string and also del close quote
                then
                    value=$snolq
                    value="${value%\"}"
                fi
                snolq="${value#\'}"        # Get string without open quote
                if [ "$snolq" != "$value" ] # Ditto double quote comment
                then
                    value=$snolq
                    value="${value%\'}"
                fi
		# strip leading/trailing whitespace
		value="${value#"${value%%[![:space:]]*}"}"
		value="${value%"${value##*[![:space:]]}"}"
                printf -v "$rpifun" "%s" "$value"     #eval "${rpifun}=\"$value\""

            fi
        done < $cf
    fi
    return
}

function askyn() {
    local ans
    echo -n "$1" '[y/N]? ' ; read $2 ans
    [ "$dbl" != "" ] && echo ""
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function pingcheck() {
    ping -n -c 1 -w 2 $1 >/dev/null 2>&1
}

function mustanswer() {
    # $1 = prompt string
    # Returns the answer in the variable named by $2
    # $3 = default
    local pmpt=$1 ans="" dfl="$3"

    while [ "$ans" == "" ] ;
    do
	echo -n "$pmpt [$dfl]: " ; read ans
	[ "$dbl" != "" ] && echo ""
    done
    eval "${2}=\"$ans\""
}

function askdefault () {
    # $1=prompt, $2=return variable $3=default-for-prompt-plus-default $4=default-if-provided
    local pmpt=$1 dfl="$3" ddfl="$4" tmp=""
    echo -n "$pmpt [$dfl]: " ; read tmp
    [ "$dbl" != "" ] && echo ""
    if [ "$tmp" == "" ]
    then
	[ "$ddfl" != "" ] && tmp="$ddfl" || tmp="$dfl"
    fi
    eval "${2}=\"$tmp\""     # Defines a variable with the return value
}

function isipaddr() {
    #
    # Returns true if $1 is an IP address
    #
    [[ "$1" =~ ^([0-9]{1,3}[\.]){3}[0-9]{1,3} ]] && return 0 || return 1
    return
}

function issubnet() {
    #
    # Returns true if $1 is a subnet
    #
    [[ "$1" =~ ^([0-9]{1,3}[\.]){3}0\/[0-9]{1,2}$ ]] && return 0 || return 1
    return
}

function isdomain() {
    local domain="$1"
    [[ "$1" =~ ^([a-zA-Z0-9](([a-zA-Z0-9-]){0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$ ]] && return 0 || return 1
}

function makeconnconf() {
# $1=cfgfile $1=ikename $3=remoteip $4=thisvpncert $5=thisid $6=remotevpncert $7=remoteid $8=thisrange $9=remoterange $10='remote' or 'primary'
    local tcnfile="$1" tike="$2" trip="$3" tvpnf="$4" tid="$5"
    local rvpnf="$6" rid="$7" trange="$8" rrange="$9" premote="${10}"
    cat > $tcnfile <<EOF
connections {
    $tike {
      version = 2
      mobike = no
      local_addrs  = %any
      remote_addrs = $trip
      fragmentation = yes
      proposals = aes128-sha256-x25519
      rekey_time = $connrekeytime
      dpd_delay = ${dpddelay}s
      local {
         auth = pubkey
         cacerts = $cacertfn
         certs = $tvpnf
         id = $tid
      }
      remote {
         auth = pubkey
         cacerts = $cacertfn
         certs = $rvpnf
         id = $rid
      }
      children {
         $tike {
EOF
    updowns="/usr/lib/ipsec/_updown"
    # If $updowns not found we were built from tarball, so use alternate location
    [ ! -f $updowns ] && updowns="/libexec/ipsec/_updown"
    [ ! -f $updowns ] && echo "% Configuration problem: _updown script not found in /usr/lib/ipsec or /libexec/ipsec"
    # net2 is always 0
    if [ $net2 -eq 0 ]
    then
	[ $fsite -eq 0 ] && echo "            local_ts  = $trange" >> $tcnfile
	# Standard VPN connection
	cat >> $tcnfile <<EOF
            remote_ts = $rrange
            updown = $updowns iptables
            rekey_time = $childrekeytime
            dpd_action = $dpdaction
            esp_proposals = aes128gcm128-x25519
         }
      }
   }
}
EOF
    else
	# Both ends of network using same subnet
	# ** This is not working and is tied off for now 
	if [ "$premote" == "primary" ]
	then
	    # primary site-to-site
	    cat >> $tcnfile <<EOF
            local_ts = $mylocalts
            remote_ts = $myrmtts
            mark_in = 8
            set_mark_in = %same
            mark_out = 4
            updown = /usr/local/bin/mark_updown.pistrong
            #updown = $updowns iptables
            rekey_time = $childrekeytime
            dpd_action = $dpdaction
            esp_proposals = aes128gcm128-x25519
         }
      }
   }
}
EOF
	else
	    # secondary site-to-site
	    cat >> $tcnfile <<EOF
            local_ts = $rmlocalts
            remote_ts = $rmrmtts
            updown = $updowns iptables
            rekey_time = $childrekeytime
            dpd_action = $dpdaction
            esp_proposals = aes128gcm128-x25519
         }
      }
   }
}
EOF
	fi
    fi
}

function makeInstallScript() {
# $1=hostname, $2=myip $3=otherhost $4=cnfile $5=ipfile $6=fwfile $7=ikename
    local thost=$1 tip=$2 tother=$3 tcnfile=$4 tipfile=$5 tfwfile=$6 ikenm=$7

    cat >> pistrong-vpn-installer <<EOF
#!/bin/bash
# pistrong 3.1 Linux VPN Configuration Installer
# Built on host '$thishostx' for host '$thost' at $(date +"%Y%m%d-%H%M%S")
zf=\$1
zfn=\$(basename \$zf)
swandir=\${2:-/etc/swanctl}
[ -f \$swandir/pistrong/VPNClients/$tother-Tunnel ] && echo "? Client VPN connection named '$tother-Tunnel' already exists" && exit 1
for f in \$swandir/x509ca/$cacertfn \$swandir/x509/$myvpncertfn \$swandir/private/${myvpnf}VPNKey.pem \$swandir/private/${rmvpnf}VPNKey.pem\$swandir/conf.d/$tcnfile 
do
    [ -f \$f ] && echo "? File '\$f' already exists; Aborting" && exit 1
done
unzip -d \$swandir/x509ca    \$zf $cacertfn
unzip -d \$swandir/x509      \$zf $myvpncertfn
unzip -d \$swandir/x509      \$zf $rmvpncertfn
unzip -d \$swandir/private   \$zf ${myvpnf}VPNKey.pem
unzip -d \$swandir/private   \$zf ${rmvpnf}VPNKey.pem
unzip -d \$swandir/conf.d    \$zf $tcnfile
rm -f \$swandir/pistrong/$tipfile
unzip -d \$swandir/pistrong  \$zf $tipfile
rm -f \$swandir/pistrong/$tfwfile
unzip -d \$swandir/pistrong  \$zf $tfwfile
cp \$zf \$swandir/pistrong/client-assets
cat >> \$swandir/pistrong/VPNClients/$tother-Tunnel <<IEOF
# Tunnel Client VPN $tother-Tunnel connection assets
conn=$tother-Tunnel
file=x509ca/$cacertfn
file=x509/$myvpncertfn
file=x509/$rmvpncertfn
file=private/${myvpnf}VPNKey.pem
file=private/${rmvpnf}VPNKey.pem
file=conf.d/$tcnfile
file=pistrong/client-assets/\$zfn
IEOF
cp \$zf \$swandir/pistrong/client-assets
echo ""
if [ ! -f /etc/systemd/system/pistrong-iptables-load.service ]
then
    cat > /etc/systemd/system/pistrong-iptables-load.service <<DEOF
[Unit]
Description=Load iptables for strongSwan
Requires=network-online.target

[Service]
ExecStart=/sbin/iptables-restore /etc/swanctl/pistrong/iptables
User=root
StandardInput=null
StandardOutput=null
StandardError=null
Restart=on-failure

[Install]
WantedBy=multi-user.target

DEOF
chmod 644 /etc/systemd/system/pistrong-iptables-load.service
systemctl daemon-reload
fi
echo "You must update your iptables firewall configuration for this VPN"
echo ""
echo "If you have a firewall or iptables configuration already, add the contents"
echo " of $tfwfile to it"
echo ""
echo "If you do not have a firewall:"
echo "  Add the contents of /etc/swanctl/pistrong/$tfwfile to /etc/swanctl/pistrong/iptables"
echo "  sudo systemctl enable --now pistrong-iptables-load"
echo ""
echo "Then sudo start strongswan"
echo "When everything works correctly sudo systemctl enable --now strongswan"
echo ""
EOF
    if [ "$tip" == "%any" ]
    then
	cat >> pistrong-vpn-installer <<EOF
echo "This tunnel can only be initiated from the remote host ($tother)"
EOF
    else
	cat >> pistrong-vpn-installer <<EOF
echo "To start the tunnel:"
echo "  pistrong client start $tother-Tunnel"
echo "See vpnmon on the pistrong GitHub for one method of starting the VPN tunnel automatically"
echo ""
EOF
    fi
}

function makevpniptables() {
    local cnfile=$1 therange=$2 premote=$3
    [ -f $cnfile ] && rm -f $cnfile
    if [ $net2 -eq 0 ]
    then
	cat > $cnfile <<EOF
# These firewall rules must be added to iptables on this VPN Server host
#
*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s $therange -o eth0 -m policy --dir out --pol ipsec -j ACCEPT
-A POSTROUTING -s $therange -o eth0 -j MASQUERADE
COMMIT
EOF
    else
	# ** This is tied off b/c net2 always 0
	if [ "$premote" == "primary" ]
	then
	    # primary  site-to-site
	    cat > $cnfile <<EOF
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
#-A PREROUTING -s $myrmtts -d 10.8.0.0/24 -i eth0 -j MARK --set-xmark 0x4/0xffffffff
COMMIT
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
#-A PREROUTING -d $mylocalts -i eth0 -m mark --mark 0x8 -j NETMAP --to $myrmtts
# Change eth0 to eth1 if 2 adatpers V
#-A PREROUTING -d 10.8.0.0/24 -i eth0 -m mark --mark 0x4 -j NETMAP --to $myrmtts
#-A POSTROUTING -s $myrmtts  -o eth0 -m mark --mark 0x8 -j NETMAP --to 10.8.0.0/24
# Change eth0 to eth1 if 2 adatpers V
#-A POSTROUTING -s $myrmtts  -o eth0 -m mark --mark 0x4 -j NETMAP --to $mylocalts
COMMIT
*filter
#:INPUT DROP [0:0]
#:FORWARD DROP [0:0]
#:OUTPUT DROP [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
# These are only really needed if default policy for each table != ACCEPT
-A INPUT -i eth0 -p esp -j ACCEPT
-A INPUT -i eth0 -p ah -j ACCEPT
-A INPUT -i eth0 -p udp -m udp --sport 500 --dport 500 -j ACCEPT
-A INPUT -i eth0 -p udp -m udp --sport 4500 --dport 4500 -j ACCEPT
-A FORWARD -o eth0 -m mark --mark 0x4 -j ACCEPT
-A FORWARD -i eth0 -m mark --mark 0x8 -j ACCEPT
-A OUTPUT -o eth0 -p esp -j ACCEPT
-A OUTPUT -o eth0 -p ah -j ACCEPT
-A OUTPUT -o eth0 -p udp -m udp --sport 500 --dport 500 -j ACCEPT
-A OUTPUT -o eth0 -p udp -m udp --sport 4500 --dport 4500 -j ACCEPT
COMMIT
EOF
	else
	    # secondary site-to-site
	    cat > $cnfile <<EOF
*filter
# INPUT items only needed if default policy for INPUT != ACCEPT
-A INPUT -i eth0 -p esp -j ACCEPT
-A INPUT -i eth0 -p ah -j ACCEPT
-A INPUT -i eth0 -p udp -m udp --sport 500 --dport 500 -j ACCEPT
-A INPUT -i eth0 -p udp -m udp --sport 4500 --dport 4500 -j ACCEPT
# OUTPUT items only needed if default policy for OUTPUT != ACCEPT
-A OUTPUT -o eth0 -p esp -j ACCEPT
-A OUTPUT -o eth0 -p ah -j ACCEPT
-A OUTPUT -o eth0 -p udp -m udp --sport 500 --dport 500 -j ACCEPT
-A OUTPUT -o eth0 -p udp -m udp --sport 4500 --dport 4500 -j ACCEPT
# FORWARD table entries needed
#-A FORWARD -s $mylocalts -d $rmlocalts -i eth0 -m policy --dir in --pol ipsec --reqid 1 --proto esp -j ACCEPT
#-A FORWARD -s $rmlocalts -d $mylocalts -o eth0 -m policy --dir out --pol ipsec --reqid 1 --proto esp -j ACCEPT
COMMIT
EOF
	fi
    fi
}

function makefwiptables() {

    local fn=$1 vpnip=$2
    cat > $fn <<EOF
# V1.1
#
# This is not required for a typical pistrong configuration
#
# These are the Linux firewall rules needed to support a strongSwan VPN server
# running behind the firewall. These are only needed on a Linux router 
# operating as the firewall. Other firewalls may need equivalent changes
# via port forwarding, virtual servers, etc.
# If a VPN Server hosts multiple firewalls, add the rules only once.
#
# Rules assume that eth0=LAN and eth1=WAN
#
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

-A PREROUTING -i eth1 -p udp -m udp --dport 500  -j DNAT --to-destination $vpnip
-A PREROUTING -i eth1 -p udp -m udp --dport 4500 -j DNAT --to-destination $vpnip
# Example of how to port forward ssh via an alternate port
#-A PREROUTING -i eth1 -p tcp -m tcp --dport 23   -j DNAT --to-destination $vpnip:22

-A POSTROUTING -o eth1 -p udp -m udp --dport 500 -j MASQUERADE
-A POSTROUTING -o eth1 -j MASQUERADE

COMMIT

*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A INPUT -i eth0 -j ACCEPT

-A FORWARD -p esp -j ACCEPT
-A FORWARD -p ah -j ACCEPT
-A FORWARD -i eth0 -j ACCEPT
-A FORWARD -i eth0 -o eth1 -j ACCEPT
-A FORWARD -i eth1 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
#-A FORWARD -d $vpnip -p udp -m udp --dport 500 -j ACCEPT
#-A FORWARD -d $vpnip -p udp -m udp --dport 4500 -j ACCEPT
COMMIT
EOF

}

function writemakeTunnelLog() {
    local dt=$(date +"%Y-%m-%d %H:%M:%S")
    local mkt="/etc/swanctl/pistrong/makeTunnel.log"
    [ -f $mkt.bak ] && rm -f $mkt.bak
    [ -f $mkt ] && mv $mkt $mkt.bak
    cat >> $mkt <<EOF
date:          $dt
version:       $version
ttype:         $ttype
tunnelname:    $tunnelname
hostname:      $(hostname)
thishost:      $thishost
thistostx:     $thishostx
rmhost:        $rmhost
myrange:       $myrange
mylanip:       $mylanip
rmrange:       $rmrange
rmlanip:       $rmlanip
myip:          $myip
rmip:          $rmip
mytid:         $mytid
rtid:          $rtid
rekeytime:     $connrekeytime
EOF
}

#
# Main
#
cmd=$0
cf=$1
[[ $EUID -ne 0 ]] && errexit "? Please rerun: 'sudo $cmd'"
dbl=""
debug=1
#debug=0               # 0=debug 1=production
thishostx=$(hostname)
thishostx=${thishostx%%.*} # Strip domain name(s)
thishost="$thishostx"
net2=0

if [ "$cf" == "" ]
then
    echo $"
Build a Site-to-Site tunnel configuration

After the configuration information has been gathered, it will be displayed
for review/confirmation before any changes are made to the system

Details required for each end of the Tunnel:
 * Hostname, LAN IP address, LAN IP range (CIDR), WAN IP address or DNS name
   * The LAN IP range (CIDR) is explained below
   * The WAN IP address is required for a host to act as a VPN Server
     (that is, able to receive VPN tunnel connection requests)

The tunnel can be site-to-site (routing onto remote LAN) or host-to-host
"
    echo -n "Tunnel type [S]ite or Host: " ; read tmp
    case "${tmp,,}" in
	h|host) echo "Host-to-host tunnel selected"
		fsite=1
		ttype="Host-to-Host"
		;;
	s|site|*) echo "Site-to-site tunnel selected"
		  ttype="Site-to-Site"
		  fsite=0
		  ;;
    esac
    echo $"
** The tunnel name is used for configuration naming
   Each tunnel must have a unique name
"
    askdefault "Tunnel name" tunnelname "newtunnel"
    # Error if Tunnel config file exists
    fs=$(ls /etc/swanctl/conf.d/Tunnel-${tunnelname}*.conf  2> /dev/null)
    [ "$fs" != "" ] && errexit "? A tunnel named '$tunnelname' already exists"
    askdefault "Name for this end of the tunnel" thishost "$thishostx"
    [ "$thishost" != "$thishostx" ] && fpack=0 || fpack=1
    echo "** Use the host name (for example) for the remote end of the tunnel"
    askdefault "Remote VPN Server name" rmhost "remote"
    echo $"
** The IP ranges for each end of the tunnel must be carefully and accurately specified

   This script will build a $ttype VPN with this configuration:
"
    [ $fsite -eq 0 ] && echo "   LocalNet1 <---> VPN Server 1 ($thishost) <---> Tunnel <---> VPN Server 2 ($rmhost) <---> LocalNet2"
    [ $fsite -eq 1 ] && echo "   VPN Server 1 ($thishost) <---> Tunnel <---> VPN Server 2 ($rmhost)"
    echo $"   Where:
        LocalNet1         Local LAN IP Range for ${thishost}'s network
        VPN Server 1      Server at one end of the tunnel ($thishost)
        Tunnel            VPN tunnel transporting traffic between the two networks
        VPN Server 2      Server at other end of the tunnel ($rmhost)
        LocalNet2         Local LAN IP Range for ${rmhost}'s network

   Site-to-site VPN: Hosts on each LAN can access the remote LAN with appropriate routing settings
   Host-to-host VPN: VPN Servers can access each other but not hosts on the remote LAN

   NOTE: For site-to-site VPNs LocalNet1 and LocalNet2 cannot be the same subnet (e.g., 192.168.1.0/24 on both networks)
   If both networks are the same, one network must be completely IP-reassigned before configuring this VPN
   This script does NO IP range syntax checking. If it's wrong the VPN will fail or will not pass traffic

   For host-to-host VPNs, the subnets on each end of the VPN can be the same. However, the two VPN servers
   may not have the exact same IP address.

** IP ranges are entered as a.b.c.d/nn (e.g., 192.168.1.0/24)
   See CIDR: https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing
"
    while [ 0 ]
    do
	if [ $fsite -eq 0 ]
	then
	    mustanswer "IP range for the '$thishost' LAN" myrange ""
	    issubnet $myrange && break
	    echo "? '$myrange' is not a subnet in the form a.b.c.d/nn"
	else
	    mustanswer "LAN IP address for '$thishost'" mylanip ""
	    isipaddr $mylanip && break
	    echo "? '$mylanip' is not a valid IP Address"
	fi
    done

    while [ 0 ]
    do
	if [ $fsite -eq 0 ]
	then
	    mustanswer "LAN IP address for '$thishost' in subnet $myrange" mylanip ""
	    isipaddr $mylanip && break
	    echo "? '$mylanip' is not a valid IP Address"
	else
	    myrange=$mylanip
	    break
	fi
    done

    [[ ! "$myrange" =~ "${mylanip%.*}" ]] && echo "% My LAN IP [$mylanip] is not in the IP range for '$thishost' [$myrange]; Continuing..."

    while [ 0 ]
    do
	if [ $fsite -eq 0 ]
	then
	    mustanswer "IP range for the '$rmhost' LAN" rmrange ""
	    issubnet $rmrange && break
	    echo "? '$rmrange' is not a subnet in the form a.b.c.d/nn"
	else
	    mustanswer "LAN IP address for '$rmhost'" rmlanip ""
	    isipaddr $rmlanip && rmrange=$rmlanip && break
	    echo "? '$rmlanip' is not a valid IP Address"
	fi
    done

    while [ 0 ]
    do
	if [ $fsite -eq 0 ]
	then
	    mustanswer "LAN IP address for '$rmhost' in subnet $rmrange" rmlanip ""
	    isipaddr $rmlanip && break
	    echo "? '$rmlanip' is not a valid IP Address"
	else
	    rmrange=$rmlanip
	    break
	fi
    done

    [[ ! "$rmrange" =~ "${rmlanip%.*}" ]] && echo "% LAN IP [$rmlanip] is not in the IP range for '$rmhost' [$rmrange]; Continuing..."

    if [ "$myrange" == "$rmrange" ]
    then
	if [ $fsite -eq 0 ]
	then
	    errexit "? Site-to-site tunnel endpoint LANs cannot have identical subnets"
	else
	    errexit "? Host-to-host tunnel endpoints cannot have identical LAN IP addresses"
	fi
    fi

    # Same subnet site-to-site not working yet, so tied off
    #if [ "$myrange" == "$rmrange" -a $fsite -eq 0 ]
    #then
    #    echo "% Site-to-site tunnel endpoints are on the same subnet; Using net2net iptables routing"
    #    net2=1
    #    # These are only used in site-to-site same-subnet which is not yet working
    #    # Need some renaming!!!! And add 10.8.0.0/24
    #    # ?? add ability to change these?
    #    rmlocalts="10.0.0.0/24"
    #    rmrmtts="10.4.0.0/24"
    #    mylocalts="10.4.0.0/24"
    #    myrmtts="10.0.0.0/24"
    #fi

    dynurl="http://ipinfo.io.ip"
    myip=""
    if pingcheck $dynurl
    then
	echo "Trying to obtain your external IP address..."
	myip="$(curl -s $dynurl)"
    fi

    echo $"
** The VPN configuration requires one or both of the VPN Servers be the VPN Server
   A VPN Server has ports 500 and 4500 forwarded to it, if required,
   and its external IP address is accessible from the remote system

   Let's get the external DNS name or IP address for the two hosts

   If a host does not have a DNS name or IP address assigned to it, it cannot
   be a VPN Server for this tunnel and is only capable of initiating the VPN (Client)"
    [ "$myip" == "" ] && dfl="Client Only" || dfl=$myip
    while [ 0 ]
    do
	while [ 0 ]
	do
	    printf "\n** Enter the public DNS name/IP address for host '$thishost'\n"
	    askdefault "DNS name or IP address for host '$thishost'" myip "$dfl" "%any"
	    [ "$myip" == "%any" ] && break
	    isipaddr $myip && break
	    isdomain $myip && break
	    echo "? '$myip' is not a recognized IP Address or domain name"
	done

	while [ 0 ]
	do
	    printf "\n** Enter the public DNS name/IP address for host '$rmhost'\n"
	    askdefault "DNS name or IP address for host '$rmhost'" rmip "Client Only" "%any"
	    [ "$rmip" == "%any" ] && break
	    isipaddr $rmip && break
	    isdomain $rmip && break
	    echo "? '$rmip' is not a recognized IP Address or domain name"
	done

	if [ "$myip" == "%any" -a "$rmip" == "%any" ]
	then
	    echo "% Neither host is configured to be a Server for this VPN"
	    echo ""
	    if  ! askyn "Do you want to redo VPN server public name/address configuration"
	    then
		echo "% Rerun with 'sudo $cmd' when you're ready to proceed"
		exit
	    fi
	else
	    break
	fi    
    done

    echo $"
** The VPN ID is used as part of the authentication process
   The defaults are fine, but change them as desired
"
    askdefault "VPN ID for the '$thishost' VPN Server" mytid "$thishost.$tunnelname.com"
    askdefault "VPN ID for the '$rmhost' VPN Server" rtid "$rmhost.$tunnelname.com"

    echo $"
** Rekeying the connection increases security
   Default rekey times in seconds set by this script:
     Connection rekey: 86400 (24*60*60=1 day)
     Child tunnel rekey: Connection rekey minus 3 minutes
   You can change the rekey time here or edit the connection config files later
"
    askdefault "Connection rekey time" connrekeytime "86400"
    childrekeytime=$((connrekeytime-180))
    #
    # Dead peer delay configuration

    echo $"
** Dead peer detection enables the VPN to recognize that the tunnel is
   not responding. This is done by sending an 'ruthere' message every
   dpd-delay seconds. If you want to use dpd, a good delay is 10 seconds
   and can be 2-60.

   Once the tunnel has been built you can edit the configuration file
   if you want to change dead peer detection settings

** dpd-delay specifies the delay in seconds between ruthere messages
   Press Return or enter 0 to disable dead peer detection
"
    while [ 0 ]
    do
	askdefault "Dead peer detection delay" dpddelay "10"
	[ $dpddelay -eq 0 -o $dpddelay -gt 2 ] && break
	echo "% Dead peer detection delay must be great than 2"
    done
    dpdaction="none"
    if [ $dpddelay -ne 0 ]
    then
	echo $"
** Dead peer detection can take one of these actions when a dead peer is detected:
   * clear:   Close the tunnel
   * restart: Restarts the tunnel
   * trap:    Catch matching traffic and try to re-negotiate the tunnel on demand
   * none:    Disable dead peer detection 

  You must specify one of clear, restart, trap, or none
  or press Enter to accept the default [clear]
"
	while [ 0 ]
	do
	    askdefault "Dead peer detection action (clear, restart, trap)" dpdaction "clear"
	    dpdaction=${dpdaction,,}
	    case $dpdaction in
		clear|restart|trap|none)
		    break
		    ;;
		*)
		    echo "? '$dpdaction' is an invalid action"
		    ;;
	    esac
	done
    fi
else
    # Process config file
    [ -f $cf ] || errexit "? makeTunnel Configuration file '$cf' not found"
    echo "> Load Tunnel configuration from '$cf'"
    readconfig $cf
    #
    # Fiddle a few things
    #
    thishostx=$thishost
    fpack=1
    [ "$tunneltype" == "" ] && tunneltype="Site-to-Site"
    #[ "$thishost" != "$thishostx" ] && fpack=0 || fpack=1
    [ "$tunneltype" == "Site-to-Site" ] && fsite=0 || fsite=1
    [ "$myip" == "" ] && myip="%any"
    [ "$rmip" == "" ] && rmip="%any"
    mytid="$thishost.$tunnelname.com"
    rtid="$rmhost.$tunnelname.com"
    myrange="${mylanip%.*}.0/24"
    rmrange="${rmlanip%.*}.0/24"
    dpddelay=10
    dpdaction=clear
    connrekeytime=86400
    childrekeytime=$((connrekeytime-180))
fi
#
# All done asking questions!
#
caname="${tunnelname}-${thishost}"
cacertfn="${caname}CACert.pem"
myvpnf="${thishost}-${caname}"
myvpncertfn="${myvpnf}VPNCert.pem"
rmvpnf="${rmhost}-${caname}"
rmvpncertfn="${rmvpnf}VPNCert.pem"
tunnelmyhost="${tunnelname}-${thishost}"
tunnelrmhost="${tunnelname}-${rmhost}"
ikesfx="-Tunnel"
thisike="${thishost}${ikesfx}"
rmike="${rmhost}${ikesfx}"
echo $"
** Ready to create the configuration for $ttype tunnel '$tunnelname'

      CA  Cert  $cacertfn
      VPN Cert  $myvpncertfn with id '$mytid'
      VPN Cert  $rmvpncertfn with id '$rtid'

             Tunnel assets on $thishost
      Tunnel Config File    /etc/swanctl/conf.d/Tunnel-${tunnelrmhost}.conf"
[ $fpack -eq 0 ] && echo "      VPN Config Pack       /etc/swanctl/pistrong/server-assets/Tunnel-${tunnelmyhost}.zip"
[ $fpack -eq 0 ] && echo "        for '$thishost'"
echo $"      VPN Config Pack       /etc/swanctl/pistrong/server-assets/Tunnel-${tunnelrmhost}.zip
        for '$rmhost'

** VPN Network configuration
"
if [ $fsite -eq 0 ]
then
    printf "%16s %16s %16s  %-16s\n" "Host name" "LAN IP" "LAN range" "External Address"
    printf "%16s %16s %16s  %-16s\n" "$thishost" $mylanip $myrange $myip
    printf "%16s %16s %16s  %-16s\n" "$rmhost" $rmlanip $rmrange $rmip
else
    printf "%16s %16s %16s\n" "Host name" "LAN IP" "External Address"
    printf "%16s %16s %16s\n" "$thishost" $mylanip $myip
    printf "%16s %16s %16s\n" "$rmhost" $rmlanip $rmip
fi
[ "$myip" == "%any" -o "$rmip" == "%any" ] && echo "   * Hosts with an External Address of '%any' are VPN clients only"
printf "\n** Dead peer detection configuration\n"
[ $dpddelay -ne 0 ] && printf "   Dead peer detection is enabled\n   Delay:  %s seconds\n   Action: %s\n" $dpddelay $dpdaction || \
	printf "   Dead peer detection is disabled\n"

if [ "$cf" == "" ]
then
    printf "\n** Answer N and restart the script if you'd like to change anything\n"
    if ! askyn "Do you want to continue"
    then
	exit
    fi
fi

echo "Create certs..."
if [ $debug -eq 1 ]
then
    pistrong createca $caname --nocamsg --novpncert
    pistrong makevpncert $thishost --vpnsankey $mytid --cacert $caname
    pistrong makevpncert $rmhost --vpnsankey $rtid --cacert $caname
fi
echo ""
echo "Build VPN Config Pack for host '$rmhost'..."
tmpdir=$(mktemp -d -p /tmp mktunXXXX)
pushd $tmpdir > /dev/null
cnfile="Tunnel-${tunnelmyhost}.conf"
ipfile="Tunnel-${tunnelmyhost}-VPNRouting.iptables"
fwfile="Tunnel-${tunnelmyhost}-firewall.iptables"
makeconnconf "./$cnfile" $thisike $myip $rmvpncertfn $rtid $myvpncertfn $mytid $rmrange $myrange "remote"
makevpniptables "./$ipfile" "$myrange" "remote"
makefwiptables "./$fwfile" "$rmlanip" "remote"

if [ $debug -eq 1 ]
then
    cp /etc/swanctl/x509ca/$cacertfn .
    cp /etc/swanctl/x509/$myvpncertfn .
    cp /etc/swanctl/x509/$rmvpncertfn .
    cp /etc/swanctl/private/${myvpnf}VPNKey.pem .
    cp /etc/swanctl/private/${rmvpnf}VPNKey.pem .
else
    touch $cacertfn
    touch $myvpncertfn
    touch $rmvpncertfn
    touch ${myvpnf}VPNKey.pem
    touch ${rmvpnf}VPNKey.pem
fi
makeInstallScript $rmhost $myip $thishost $cnfile $ipfile $fwfile $rmike
zip -j /etc/swanctl/pistrong/server-assets/Tunnel-${tunnelrmhost}.zip *
#
# Make a VPN Config pack for $thishost
# if $thishost == $thishostx put files into running system
#
echo "Build VPN Config Pack for host '$thishost'..."
rm -f pistrong-vpn-installer Tunnel-${tunnelmyhost}.conf
rm -f "Tunnel-${tunnelmyhost}-VPNRouting.iptables"
rm -f "Tunnel-${tunnelmyhost}-firewall.iptables"
cnfile="Tunnel-${tunnelrmhost}.conf"
ipfile="Tunnel-${tunnelrmhost}-VPNRouting.iptables"
fwfile="Tunnel-${tunnelrmhost}-firewall.iptables"
makeconnconf "./$cnfile" $rmike $rmip $myvpncertfn $mytid $rmvpncertfn $rtid $myrange $rmrange "primary"
makevpniptables "./$ipfile" "$rmrange" "primary"
makefwiptables "./$fwfile" "$mylanip" "primary"
makeInstallScript $thishost $rmip $rmhost $cnfile $ipfile $fwfile $thisike
zip -j /etc/swanctl/pistrong/server-assets/Tunnel-${tunnelmyhost}.zip *
if [ $fpack -eq 1 ]
then
    echo "Copying '$thishost' VPN Config Pack into place..."
    # put files into running system
    cp $cnfile /etc/swanctl/conf.d
    cp $fwfile /etc/swanctl/pistrong
    cp $ipfile /etc/swanctl/pistrong
    if [ ! -f /etc/systemd/system/pistrong-iptables-load.service ]
    then
    cat > /etc/systemd/system/pistrong-iptables-load.service <<DEOF
[Unit]
Description=Load iptables for strongSwan
Requires=network-online.target

[Service]
ExecStart=/sbin/iptables-restore /etc/swanctl/pistrong/iptables
User=root
StandardInput=null
StandardOutput=null
StandardError=null
Restart=on-failure

[Install]
WantedBy=multi-user.target

DEOF
    chmod 644 /etc/systemd/system/pistrong-iptables-load.service
    fi
    if [ "$rmip" != "%any" ]
    then
	cat >> /etc/swanctl/pistrong/VPNClients/$rmhost-Tunnel <<EOF
# Tunnel Client VPN $thost-Tunnel connection assets
conn=$rmhost-Tunnel
file=x509ca/$cacertfn
file=x509/$myvpncertfn
file=x509/$rmvpncertfn
file=private/${myvpnf}VPNKey.pem
file=private/${rmvpnf}VPNKey.pem
file=conf.d/$cnfile
file=pistrong/client-assets/Tunnel-${tunnelmyhost}.zip
EOF
	cp /etc/swanctl/pistrong/server-assets/Tunnel-${tunnelmyhost}.zip /etc/swanctl/pistrong/client-assets
    fi
fi
popd > /dev/null
rm -rf $tmpdir

writemakeTunnelLog

echo $"
Next Steps
  * On host '$rmhost':
    *  Copy the VPN Config Pack (/etc/swanctl/pistrong/server-assets/Tunnel-${tunnelrmhost}.zip) to host '$rmhost'
    *  'sudo pistrong client install Tunnel-${tunnelrmhost}.zip' to install the tunnel configuration
    *  Configure iptables using /etc/swanctl/pistrong/Tunnel-${tunnelmyhost}-VPNRouting.iptables
       and https://github.com/gitbls/pistrong/blob/master/README.md#firewall-considerations
    *  Restart strongSwan: sudo systemctl restart strongswan
"
[ $fpack -ne 3 ] && echo "  * On host '$thishost':"  # Always printed
[ $fpack -eq 0 ] && echo "    *  Copy the VPN Config Pack (/etc/swanctl/pistrong/server-assets/Tunnel-${tunnelmyhost}.zip) to '$thishost'"
[ $fpack -eq 0 ] && echo "    *  'sudo pistrong client install Tunnel-${tunnelrmhost}.zip' to install the tunnel configuration"
[ $fpack -eq 1 ] && echo "    *  The tunnel configuration has been installed on host '$thishost'"
[ $fpack -eq 1 ] && echo "    *  Configure iptables using /etc/swanctl/pistrong/Tunnel-${tunnelrmhost}-VPNRouting.iptables"
[ $fpack -eq 1 ] && echo "       and https://github.com/gitbls/pistrong/blob/master/README.md#firewall-considerations"
[ $fpack -eq 1 ] && echo "    *  Restart strongSwan: sudo systemctl restart strongswan"
echo $"
  * Start the VPN tunnel:
    Only start tunnel from one end if both servers are client-capable
"
[ "$myip" != "%any" ] &&  echo "     On $rmhost: sudo pistrong client start $thishost-Tunnel"
[ "$rmip" != "%any" ] &&  echo "     On $thishost: sudo pistrong client start $rmhost-Tunnel"
[ "$myip" == "%any" ] && echo "     [This tunnel cannot be initiated from host '$rmhost'; the address of host '$thishost' is not known]"
[ "$rmip" == "%any" ] && echo "     [This tunnel cannot be initiated from host '$thishost'; the address of host '$rmhost' is not known]"
echo $"
Once everything is working to your satisfaction, consider 'sudo systemctl enable strongswan'
  to start the strongSwan service (but NOT the VPN tunnel) automatically
See vpnmon on the pistrong GitHub for one method of starting the VPN tunnel automatically
"
exit
